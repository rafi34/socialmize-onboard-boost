import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/lib/supabaseClient';
import { toast } from '@/hooks/use-toast';
import { CheckCircle, Clock, Loader2, MessageSquare, Send, SendHorizontal, User, AlertCircle, Info, FileCheck, FilePlus, FileWarning, Calendar } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import Markdown from 'react-markdown';
import { StrategyData } from '@/types/dashboard';

// Message interface
interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: string;
}

// Content idea interface
interface ContentIdea {
  id: string;
  day: number;
  title: string;
  contentType: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed';
}

// Content plan interface
interface ContentPlan {
  id: string;
  userId: string;
  month: string;
  summary: string;
  mission: string;
  weeklyObjective: string;
  contentSchedule: Record<string, string[]>;
  contentIdeas: ContentIdea[];
  createdAt: string;
  updatedAt: string;
}

const ContentPlanner: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [dataLoaded, setDataLoaded] = useState(false);
  const [statusMessage, setStatusMessage] = useState<{type: 'info' | 'error' | 'success' | 'warning', title: string, message: string} | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [sending, setSending] = useState(false);
  const [threadId, setThreadId] = useState<string | null>(null);
  const [error, setError] = useState<{title: string, message: string} | null>(null);
  const [backendAvailable, setBackendAvailable] = useState(true);
  const [deploymentError, setDeploymentError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('chat');
  const [starterStrategy, setStarterStrategy] = useState<StrategyData | null>(null);
  const [contentPlan, setContentPlan] = useState<ContentPlan | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const hasInitiatedChat = useRef(false);

  // Auto scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Mock content data for development without backend
  const createMockContentData = () => {
    console.log('Creating mock content data for development');
    const mockStrategy = {
      id: 'mock-strategy-id',
      niche_topic: 'Digital Marketing',
      experience_level: 'Intermediate',
      content_types: ['Video', 'Blog Post', 'Social Media'],
      posting_frequency: '3-4 times per week',
      creator_style: 'Educational with humor',
      weekly_calendar: {
        'Monday': ['Blog Post'],
        'Wednesday': ['Video Content'],
        'Friday': ['Social Media']
      },
      summary: 'Focus on digital marketing tips and strategies for small businesses',
      full_plan_text: 'A comprehensive content strategy focused on helping small businesses improve their digital marketing efforts.',
      confirmed_at: new Date().toISOString()
    };

    const mockThreadId = 'mock-thread-id-' + Date.now();

    const welcomeMessage: Message = {
      id: `welcome-${Date.now()}`,
      role: 'assistant',
      content: "Hi there! I'm here to help you create a detailed 30-day content plan based on your confirmed starter strategy. Let's get started! Could you tell me what specific goals you'd like to achieve with your content this month?",
      timestamp: new Date().toISOString()
    };

    return { mockStrategy, mockThreadId, welcomeMessage };
  };
  // Generate mock AI response based on user input
  const generateMockResponse = (userMessage: string): string => {
    // Simple rule-based responses to simulate AI assistant
    if (userMessage.toLowerCase().includes('goal') || userMessage.toLowerCase().includes('objective')) {
      return "That's great! For digital marketing, some good goals for this month might be: increasing website traffic by 20%, growing your email list by 15%, or improving engagement on social media. What specific metrics would you like to focus on?";  
    }
    
    if (userMessage.toLowerCase().includes('traffic') || userMessage.toLowerCase().includes('website')) {
      return "Increasing website traffic is an excellent goal! I've added several traffic-focused content ideas to your plan including SEO fundamentals and content optimization techniques. Would you like me to add more ideas specifically for driving organic traffic?";  
    }
    
    if (userMessage.toLowerCase().includes('social') || userMessage.toLowerCase().includes('engagement')) {
      return "Social media engagement is crucial for building your audience. I've included several ideas for shareable content including infographics and case studies. What platforms are you focusing on most? This will help me tailor your content plan further.";  
    }
    
    if (userMessage.toLowerCase().includes('email') || userMessage.toLowerCase().includes('list')) {
      return "Growing your email list is a smart focus! I've added content ideas for lead magnets and email marketing best practices. Would you like to include more content about creating effective lead magnets or improving email open rates?";  
    }
    
    if (userMessage.toLowerCase().includes('ready') || userMessage.toLowerCase().includes('plan')) {
      setActiveTab('plan'); // Switch to the plan view
      return "I've finalized your 30-day content plan based on our conversation! You can now view the full plan in the 'Plan' tab. It includes a mission statement, weekly objectives, and 12 detailed content ideas spread throughout the month. Feel free to review it and let me know if you need any adjustments!";  
    }
    
    // Default response for any other input
    return "Thanks for sharing that! Based on your input and your starter strategy in digital marketing, I've included relevant content ideas in your 30-day plan. Would you like to focus on any particular aspect like SEO, social media, or email marketing? Or are you ready to see your complete plan?";  
  };
  
  // Load user's starter strategy and check for existing content plan
  const loadUserData = async (forceMockData = false) => {
    if (!user) {
      navigate('/auth');
      return;
    }
    
    try {
      setLoading(true);
      
      // Try to use the real implementation but fall back to mock data if needed
      const useMockData = forceMockData || false; // forceMockData provides a way to override and use mock data
      
      if (useMockData) {
        // Mock implementation code continues...
  };
  
  // Call loadUserData on component mount
  useEffect(() => {
    // Prevent multiple executions
        
        if (useMockData) {
          // Use mock data instead of real backend calls
          console.log('Using mock data for content planner');
          const { mockStrategy, mockThreadId, welcomeMessage } = createMockContentData();
          
          // Set mock data in state
          setStarterStrategy(mockStrategy as any);
          setThreadId(mockThreadId);
          setMessages([welcomeMessage]);
          
          // Create mock content plan
          const mockContentPlan = {
            id: 'mock-content-plan-id',
            userId: user.id,
            month: new Date().toISOString().slice(0, 7),
            summary: 'Your 30-day content plan focuses on digital marketing with consistent publishing across multiple channels.',
            mission: 'To provide valuable digital marketing insights to small businesses that are easy to implement and produce measurable results.',
            weeklyObjective: 'Publish 3-4 high-quality pieces of content per week that educate and engage your target audience.',
            contentSchedule: {
              'Week 1': ['Blog: SEO Fundamentals', 'Video: Social Media Tips', 'Post: Marketing Infographic'],
              'Week 2': ['Blog: Email Marketing', 'Video: Content Creation', 'Post: Growth Hacking Tips'],
              'Week 3': ['Blog: Analytics Guide', 'Video: Marketing Automation', 'Post: Case Study'],
              'Week 4': ['Blog: Conversion Rate Optimization', 'Video: Marketing ROI', 'Post: Industry Trends']
            },
            contentIdeas: [
              { id: 'idea-1', day: 1, title: 'SEO Fundamentals', contentType: 'Blog Post', description: 'A beginner guide to SEO for small businesses', status: 'pending' },
              { id: 'idea-2', day: 3, title: 'Social Media Tips', contentType: 'Video', description: 'Quick tips for growing your business social media', status: 'pending' },
              { id: 'idea-3', day: 5, title: 'Marketing Infographic', contentType: 'Social Media', description: 'Visual guide to digital marketing', status: 'pending' },
              { id: 'idea-4', day: 8, title: 'Email Marketing Guide', contentType: 'Blog Post', description: 'Best practices for email marketing campaigns', status: 'pending' },
              { id: 'idea-5', day: 10, title: 'Content Creation Tips', contentType: 'Video', description: 'How to create engaging content quickly', status: 'pending' },
              { id: 'idea-6', day: 12, title: 'Growth Hacking Tips', contentType: 'Social Media', description: 'Creative low-cost marketing strategies', status: 'pending' },
              { id: 'idea-7', day: 15, title: 'Analytics Guide', contentType: 'Blog Post', description: 'How to read and act on your marketing metrics', status: 'pending' },
              { id: 'idea-8', day: 17, title: 'Marketing Automation', contentType: 'Video', description: 'Tools and processes to automate your marketing', status: 'pending' },
              { id: 'idea-9', day: 19, title: 'Case Study', contentType: 'Social Media', description: 'Success story from a client implementation', status: 'pending' },
              { id: 'idea-10', day: 22, title: 'Conversion Optimization', contentType: 'Blog Post', description: 'Techniques to improve conversion rates', status: 'pending' },
              { id: 'idea-11', day: 24, title: 'Marketing ROI', contentType: 'Video', description: 'How to measure the return on marketing investment', status: 'pending' },
              { id: 'idea-12', day: 26, title: 'Industry Trends', contentType: 'Social Media', description: 'Latest trends in digital marketing', status: 'pending' },
            ],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          };
          
          setContentPlan(mockContentPlan as any);
          setActiveTab('chat'); // Start with the chat view
          
          setLoading(false);
          setDataLoaded(true);
          return; // Exit early since we're using mock data
        }
        // Real implementation for when backend is available
        // If useMockData is false, this code would run to fetch data from Supabase
        
        // Get the confirmed starter strategy
        const { data: strategyData, error: strategyError } = await supabase
          .from('strategy_profiles')
          .select('*')
          .eq('user_id', user.id)
          .eq('is_active', true)
          .not('confirmed_at', 'is', null)
          .maybeSingle();
          
        if (strategyError) throw strategyError;
        setStarterStrategy(strategyData as any);
        
        // Check for existing content plan for the current month
        const currentMonth = new Date().toISOString().slice(0, 7); // "YYYY-MM" format
        const { data: planData, error: planError } = await supabase
          .from('content_plans')
          .select('*')
          .eq('user_id', user.id)
          .eq('month', currentMonth)
          .order('created_at', { ascending: false })
          .maybeSingle();
          
        if (planError) throw planError;
        
        if (planData) {
          setContentPlan(planData as any);
          setActiveTab('plan');
        }
        
        // Check for edge function availability
        try {
          // Get the assistant ID from environment config
          const { data: configData } = await supabase
            .from('app_config')
            .select('config_value')
            .eq('config_key', 'CONTENT_PLAN_ASSISTANT_ID')
            .single();
          
          if (!configData?.config_value) {
            throw new Error('Assistant ID not configured');
          }
          
          // Check if we can use edge functions
          const { data: testData, error: testError } = await supabase.functions.invoke('test-function', {
            body: { test: true }
          });
          
          if (testError) {
            setBackendAvailable(false);
            setStatusMessage({
              type: 'error',
              title: 'Edge Functions Not Available',
              message: 'The Content Planner requires edge functions to be deployed. Please deploy the edge functions to continue.'
            });
          }
        } catch (err) {
          console.error('Error checking edge functions:', err);
          setBackendAvailable(false);
          setStatusMessage({
            type: 'error',
            title: 'Backend Services Unavailable',
            message: 'The backend services required for the Content Planner are not available. This could be because the edge functions are not deployed or the required database tables do not exist.'
          });
        }
        
      } catch (err: any) {
        console.error("Error loading user data:", err);
        
        // Set error state and make backend unavailable
        setError({
          title: 'Error Loading Data',
          message: 'We encountered a problem loading your data. This may happen if the required tables have not been created or edge functions are not deployed.'
        });
        setBackendAvailable(false);
        
        // Set a status message
        setStatusMessage({
          type: 'error',
          title: 'Backend Services Unavailable',
          message: 'The backend services required for the Content Planner are not available. This could be because the edge functions are not deployed or the required database tables do not exist.'
        });
        
        // Also show a toast for immediate feedback
        toast({
          title: "Error",
          description: "Failed to load your data. Please try again.",
          variant: "destructive"
        });
      } finally {
        setLoading(false);
        setDataLoaded(true); // Mark data as loaded to prevent auto-refresh
      }
    };
    
    loadUserData();
  }, [user, navigate, dataLoaded]);

  // Send message to assistant
  const handleSendMessage = async () => {
    if (!inputValue.trim() || !threadId || !user) return;
    
    const userMessage: Message = {
      id: `temp-${Date.now()}`,
      role: 'user',
      content: inputValue,
      timestamp: new Date().toISOString()
    };
    
    try {
      setSending(true);
      setMessages(prev => [...prev, userMessage]);
      setInputValue('');
      
      // Try to use real backend for responses, but fall back to mock if backend services are unavailable
      const useMockResponses = !backendAvailable;
      
      if (useMockResponses) {
        // Add temporary thinking message
        const thinkingMessage: Message = {
          id: 'thinking',
          role: 'assistant',
          content: 'Thinking...',
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev.filter(m => m.id !== 'thinking'), thinkingMessage]);
        
        // Simulate AI thinking time (1-2 seconds)
        setTimeout(() => {
          // Generate mock response
          const responseContent = generateMockResponse(inputValue);
          
          // Replace thinking message with mock response
          setMessages(prev => prev.map(m => 
            m.id === 'thinking' ? {
              id: `assistant-${Date.now()}`,
              role: 'assistant',
              content: responseContent,
              timestamp: new Date().toISOString()
            } : m
          ));
          
          setSending(false);
        }, 1000 + Math.random() * 1000); // Random delay between 1-2 seconds
        
        return; // Exit early since we're using mock responses
      }
      // Real implementation for when backend is available
      try {
        // Send message to the assistant
        const { data, error } = await supabase.functions.invoke('send-assistant-message', {
          body: {
            threadId,
            userId: user.id,
            message: inputValue
          }
        });
        
        if (error) throw error;
        
        // Add temporary thinking message
        const thinkingMessage: Message = {
          id: 'thinking',
          role: 'assistant',
          content: 'Thinking...',
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev.filter(m => m.id !== 'thinking'), thinkingMessage]);
        
        // Poll for new messages every 2 seconds
        const pollInterval = setInterval(async () => {
          try {
            const { data: messagesData, error: messagesError } = await supabase.functions.invoke('get-assistant-messages', {
              body: { threadId }
            });
            
            if (messagesError) throw messagesError;
            
            if (messagesData?.messages && messagesData.messages.length > 0) {
              // Find the latest assistant message
              const latestAssistantMessage = messagesData.messages
                .filter((msg: any) => msg.role === 'assistant')
                .sort((a: any, b: any) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];
              
              if (latestAssistantMessage) {
                // Replace thinking message with the actual response
                setMessages(prev => prev.map(m => 
                  m.id === 'thinking' ? {
                    id: latestAssistantMessage.id,
                    role: 'assistant',
                    content: latestAssistantMessage.content,
                    timestamp: latestAssistantMessage.created_at
                  } : m
                ));
                
                clearInterval(pollInterval);
                setSending(false);
              }
            }
          } catch (err) {
            console.error('Error polling for messages:', err);
            clearInterval(pollInterval);
            setSending(false);
            setBackendAvailable(false); // Mark backend as unavailable if polling fails
            toast({
              title: "Error",
              description: "Communication with the AI assistant failed. Using mock responses instead.",
              variant: "destructive"
            });
          }
        }, 2000);
      } catch (err) {
        console.error('Error sending message:', err);
        // If sending to the real backend fails, fall back to mock responses
        setBackendAvailable(false);
        
        // Add temporary thinking message for mock response
        const thinkingMessage: Message = {
          id: 'thinking',
          role: 'assistant',
          content: 'Thinking...',
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev.filter(m => m.id !== 'thinking'), thinkingMessage]);
        
        // Generate mock response after delay
        setTimeout(() => {
          const responseContent = generateMockResponse(inputValue);
          setMessages(prev => prev.map(m => 
            m.id === 'thinking' ? {
              id: `assistant-${Date.now()}`,
              role: 'assistant',
              content: responseContent,
              timestamp: new Date().toISOString()
            } : m
          ));
          setSending(false);
        }, 1000 + Math.random() * 1000);
        
        toast({
          title: "Using Mock Mode",
          description: "Backend services unavailable. Using mock AI responses instead.",
          variant: "default"
        });
      }
      
    } catch (err) {
      console.error('Error sending message:', err);
      setSending(false);
      toast({
        title: "Error",
        description: "Failed to send message. Please try again.",
        variant: "destructive"
      });
    }
  };
  
  // Content Ideas Component
  const ContentIdeasComponent = () => {
    if (!contentPlan?.contentIdeas?.length) {
      return (
        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>No content ideas available</AlertTitle>
          <AlertDescription>
            Your content plan is still being created. Chat with the AI assistant to generate content ideas.
          </AlertDescription>
        </Alert>
      );
    }
    
    return (
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Content Ideas for the Month</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {contentPlan.contentIdeas.map((idea) => (
            <Card key={idea.id} className="overflow-hidden">
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-md">{idea.title}</CardTitle>
                    <CardDescription>Day {idea.day} - {idea.contentType}</CardDescription>
                  </div>
                  <Badge variant={idea.status === 'completed' ? 'default' : 'outline'}>
                    {idea.status === 'pending' ? 'To Do' : 
                     idea.status === 'in_progress' ? 'In Progress' : 'Completed'}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">{idea.description}</p>
              </CardContent>
              <CardFooter className="pt-2 flex justify-end space-x-2">
                <Button variant="outline" size="sm">
                  <FileCheck className="h-4 w-4 mr-1" />
                  Mark Complete
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    );
  };
  
  // Plan Overview Component
  const PlanOverviewComponent = () => {
    return (
      <div className="space-y-6">
        <div className="bg-muted p-4 rounded-md">
          <h3 className="text-xl font-semibold mb-2">Mission</h3>
          <p>{contentPlan?.mission || 'Mission statement will appear here once generated.'}</p>
        </div>
        
        <div className="bg-muted p-4 rounded-md">
          <h3 className="text-xl font-semibold mb-2">Weekly Objective</h3>
          <p>{contentPlan?.weeklyObjective || 'Weekly objectives will appear here once generated.'}</p>
        </div>
        
        <div className="space-y-4">
          <h3 className="text-xl font-semibold">Content Schedule</h3>
          {contentPlan?.contentSchedule ? (
            Object.entries(contentPlan.contentSchedule).map(([week, items]) => (
              <Card key={week}>
                <CardHeader>
                  <CardTitle>{week}</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    {items.map((item, index) => (
                      <li key={index}>{item}</li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ))
          ) : (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>No schedule available</AlertTitle>
              <AlertDescription>
                Your content schedule is still being created. Chat with the AI assistant to generate your schedule.
              </AlertDescription>
            </Alert>
          )}
        </div>
      </div>
    );
  };
  // Simple ErrorView component for displaying errors
  const ErrorView = ({ title, message }: { title: string, message: string }) => (
    <div className="flex flex-col items-center justify-center min-h-[50vh] p-4 text-center">
      <AlertCircle className="h-16 w-16 text-destructive mb-4" />
      <h2 className="text-2xl font-bold mb-2">{title}</h2>
      <p className="text-muted-foreground mb-6 max-w-md">{message}</p>
      <div className="space-y-4 w-full max-w-md">
        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Required Steps for Real Implementation</AlertTitle>
          <AlertDescription className="space-y-2">
            <p>1. Install Supabase CLI if you haven't:</p>
            <pre className="bg-muted p-2 rounded text-xs">npm install -g supabase</pre>
            <p>2. Login and link your project:</p>
            <pre className="bg-muted p-2 rounded text-xs">supabase login
supabase link --project-ref YOUR_PROJECT_REF</pre>
            <p>3. Apply migrations to create required tables:</p>
            <pre className="bg-muted p-2 rounded text-xs">supabase db push</pre>
            <p>4. Deploy edge functions:</p>
            <pre className="bg-muted p-2 rounded text-xs">supabase functions deploy</pre>
            <p>5. Set the OpenAI API key in your Supabase project:</p>
            <pre className="bg-muted p-2 rounded text-xs">supabase secrets set OPENAI_API_KEY=your_openai_api_key</pre>
          </AlertDescription>
        </Alert>
        <div className="grid grid-cols-2 gap-4">
          <Button onClick={() => {
            const useMockData = true;
            setError(null);
            loadUserData(true);
          }} variant="outline" className="w-full">
            Use Mock Data
          </Button>
          <Button onClick={() => navigate('/dashboard')} className="w-full">
            Return to Dashboard
          </Button>
        </div>
      </div>
    </div>
  );
  
  // Status Message Component for prominent notifications
  const StatusMessageComponent = () => {
    if (!statusMessage) return null;
    
    const iconMap = {
      'info': <Info className="h-5 w-5" />,
      'error': <AlertCircle className="h-5 w-5" />,
      'success': <CheckCircle className="h-5 w-5" />,
      'warning': <AlertCircle className="h-5 w-5" />
    };
    
    const variantMap = {
      'info': 'default',
      'error': 'destructive',
      'success': 'default',
      'warning': 'default'
    };
    
    return (
      <Alert variant={variantMap[statusMessage.type] as any} className="mb-6">
        <div className="flex items-start">
          <div className="mr-2">{iconMap[statusMessage.type]}</div>
          <div>
            <AlertTitle>{statusMessage.title}</AlertTitle>
            <AlertDescription>{statusMessage.message}</AlertDescription>
          </div>
          <Button variant="ghost" size="sm" className="ml-auto" onClick={() => setStatusMessage(null)}>
            Dismiss
          </Button>
        </div>
      </Alert>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading your content planner...</span>
      </div>
    );
  }
  
  if (error && !backendAvailable) {
    return <ErrorView title={error.title} message={error.message} />;
  }

  return (
    <div className="container max-w-6xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">30-Day Content Planner</h1>
      
      {statusMessage && <StatusMessageComponent />}
      
      <Tabs defaultValue={activeTab} value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="chat">
            <MessageSquare className="h-4 w-4 mr-2" />
            Chat with AI
          </TabsTrigger>
          <TabsTrigger value="plan">
            <Calendar className="h-4 w-4 mr-2" />
            View Plan
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="chat" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Content Plan Chat</CardTitle>
              <CardDescription>
                Chat with our AI assistant to create and refine your content plan.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[500px] pr-4">
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`flex items-start space-x-2 max-w-[80%] ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                        <Avatar className="h-8 w-8">
                          {message.role === 'user' ? (
                            <AvatarFallback className="bg-primary text-primary-foreground">
                              <User className="h-4 w-4" />
                            </AvatarFallback>
                          ) : (
                            <AvatarFallback className="bg-muted-foreground text-muted">
                              <MessageSquare className="h-4 w-4" />
                            </AvatarFallback>
                          )}
                        </Avatar>
                        <div className={`rounded-lg p-3 ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                          {message.id === 'thinking' ? (
                            <div className="flex items-center space-x-2">
                              <span>Thinking</span>
                              <Loader2 className="h-4 w-4 animate-spin" />
                            </div>
                          ) : (
                            <div className="prose dark:prose-invert max-w-none">
                              {message.content}
                            </div>
                          )}
                          <div className="mt-2 text-xs opacity-70 flex items-center">
                            <Clock className="h-3 w-3 mr-1" />
                            {new Date(message.timestamp).toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>
              </ScrollArea>
            </CardContent>
            <CardFooter>
              <form 
                className="flex w-full items-center space-x-2" 
                onSubmit={(e) => {
                  e.preventDefault();
                  handleSendMessage();
                }}
              >
                <Input
                  type="text"
                  placeholder="Type your message..."
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  disabled={sending || !threadId}
                  className="flex-1"
                />
                <Button type="submit" disabled={sending || !inputValue.trim() || !threadId}>
                  {sending ? <Loader2 className="h-4 w-4 animate-spin" /> : <SendHorizontal className="h-4 w-4" />}
                </Button>
              </form>
            </CardFooter>
          </Card>
        </TabsContent>
        
        <TabsContent value="plan" className="mt-6 space-y-8">
          {contentPlan ? (
            <>
              <PlanOverviewComponent />
              <Separator />
              <ContentIdeasComponent />
            </>
          ) : (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>No Content Plan Available</AlertTitle>
              <AlertDescription>
                You haven't generated a content plan yet. Switch to the Chat tab and talk with the AI assistant to create your plan.
              </AlertDescription>
            </Alert>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ContentPlanner;
